{"version":3,"sources":["components/CustomEditControl.js","App.js","reportWebVitals.js","index.js"],"names":["eventHandlers","onEdited","onDrawStart","onDrawStop","onDrawVertex","onEditStart","onEditMove","onEditResize","onEditVertex","onEditStop","onDeleted","onDeleteStart","onDeleteStop","CustomEditControl","props","context","useLeafletContext","controlRef","useRef","propsRef","onDrawCreate","e","layerContainer","addLayer","layer","onCreated","useEffect","key","map","on","evt","handlers","Object","keys","filter","handler","type","length","leaflet","Draw","Event","CREATED","options","edit","featureGroup","draw","position","current","Control","addTo","onMounted","off","isEqual","remove","propTypes","reduce","acc","val","PropTypes","func","shape","polyline","oneOfType","object","bool","polygon","rectangle","circle","marker","poly","allowIntersection","oneOf","App","filteredChargerData","chargerData","charger","address","country","useState","mapLayers","setMapLayers","MapContainer","center","zoom","maxZoom","FeatureGroup","layerType","_leaflet_id","layers","id","latlngs","getLatLngs","console","log","_layers","values","editing","a","l","circlemarker","TileLayer","url","attribution","Marker","gps","latitude","longitude","Popup","name","JSON","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.974fd597.chunk.js","sourcesContent":["// Refactored v3 CustomEditControl.js file\r\nimport { useEffect, useRef } from 'react';\r\nimport { PropTypes } from 'prop-types';\r\nimport Draw from 'leaflet-draw'; // eslint-disable-line\r\nimport isEqual from 'lodash/isEqual';\r\n\r\nimport { useLeafletContext } from '@react-leaflet/core';\r\nimport leaflet, { Map, Control } from 'leaflet';\r\n\r\nconst eventHandlers = {\r\n  onEdited: 'draw:edited',\r\n  onDrawStart: 'draw:drawstart',\r\n  onDrawStop: 'draw:drawstop',\r\n  onDrawVertex: 'draw:drawvertex',\r\n  onEditStart: 'draw:editstart',\r\n  onEditMove: 'draw:editmove',\r\n  onEditResize: 'draw:editresize',\r\n  onEditVertex: 'draw:editvertex',\r\n  onEditStop: 'draw:editstop',\r\n  onDeleted: 'draw:deleted',\r\n  onDeleteStart: 'draw:deletestart',\r\n  onDeleteStop: 'draw:deletestop',\r\n};\r\n\r\nfunction CustomEditControl(props) {\r\n    const context = useLeafletContext()\r\n    const controlRef = useRef()\r\n    const propsRef = useRef(props)\r\n\r\n    const onDrawCreate = (e) => {    \r\n        context.layerContainer.addLayer(e.layer);\r\n        props.onCreated && props.onCreated(e);\r\n    };\r\n\r\n    useEffect(() => {          \r\n        for (const key in eventHandlers) {\r\n            context.map.on(eventHandlers[key], (evt) => {\r\n                let handlers = Object.keys(eventHandlers).filter(handler => eventHandlers[handler] === evt.type);\r\n                if (handlers.length === 1) {\r\n                    let handler = handlers[0];\r\n                    props[handler] && props[handler](evt);\r\n                }\r\n            })\r\n        }\r\n\r\n        context.map.on(leaflet.Draw.Event.CREATED, onDrawCreate);\r\n        const options = {\r\n            edit: {\r\n                ...props.edit,\r\n                featureGroup: context.layerContainer\r\n            }\r\n        }\r\n        if (props.draw) {\r\n            options.draw = { ...props.draw };\r\n        }\r\n        if (props.position) {\r\n            options.position = props.position;\r\n        }\r\n\r\n        controlRef.current = new Control.Draw(options);\r\n        controlRef.current.addTo(context.map);\r\n        props.onMounted && props.onMounted(controlRef.current);\r\n\r\n        return () => {\r\n            context.map.off(leaflet.Draw.Event.CREATED, onDrawCreate);\r\n        \r\n            for (const key in eventHandlers) {\r\n              if (props[key]) {\r\n                context.map.off(eventHandlers[key], props[key]);\r\n              }\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        // If the props haven't changed, don't update\r\n        if (\r\n            isEqual(props.draw, propsRef.current.draw)\r\n            && isEqual(props.edit, propsRef.current.edit)\r\n            && props.position === propsRef.current.position\r\n        ) {\r\n            return false;\r\n        }\r\n\r\n        const options = {\r\n            edit: {\r\n                ...props.edit,\r\n                featureGroup: context.layerContainer\r\n            }\r\n        }\r\n        if (props.draw) {\r\n            options.draw = { ...props.draw };\r\n        }\r\n        if (props.position) {\r\n            options.position = props.position;\r\n        }\r\n\r\n        controlRef.current.remove(context.map);\r\n        controlRef.current = new Control.Draw(options);\r\n        controlRef.current.addTo(context.map);\r\n\r\n        // Remount the new draw control\r\n        props.onMounted && props.onMounted(controlRef.current);\r\n        propsRef.current = props\r\n    }, [props.draw, props.edit, props.position])\r\n\r\n    return null;\r\n}\r\n\r\nCustomEditControl.propTypes = {\r\n    ...Object.keys(eventHandlers).reduce((acc, val) => {\r\n        acc[val] = PropTypes.func;\r\n        return acc;\r\n    }, {}),\r\n    onCreated: PropTypes.func,\r\n    onMounted: PropTypes.func,\r\n    draw: PropTypes.shape({\r\n        polyline: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\r\n        polygon: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\r\n        rectangle: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\r\n        circle: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\r\n        marker: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\r\n    }),\r\n    edit: PropTypes.shape({\r\n        edit: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\r\n        remove: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\r\n        poly: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\r\n        allowIntersection: PropTypes.bool,\r\n    }),\r\n    position: PropTypes.oneOf([\r\n        'topright',\r\n        'topleft',\r\n        'bottomright',\r\n        'bottomleft'\r\n    ]),\r\n};\r\n\r\nexport default CustomEditControl;","import { useState } from \"react\";\r\nimport { MapContainer, TileLayer, Marker, Popup, FeatureGroup } from \"react-leaflet\";\r\n// import { EditControl } from \"react-leaflet-draw\";\r\nimport CustomEditControl from \"./components/CustomEditControl\"\r\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\r\nimport chargerData from \"./data/charger.json\";\r\nimport \"./App.css\";\r\nimport \"leaflet-draw/dist/leaflet.draw.css\";\r\n\r\nfunction App() {\r\n  const filteredChargerData = chargerData.filter(charger => charger.address.country === \"United Kingdom\")\r\n  const [mapLayers, setMapLayers] = useState([])\r\n\r\n  const _onCreated = (e) => {\r\n    // console.log(e)\r\n    const { layerType, layer } = e;\r\n    if (layerType === \"polygon\") {\r\n      const { _leaflet_id } = layer;\r\n      setMapLayers((layers) => [...layers, { id: _leaflet_id, latlngs: layer.getLatLngs()[0] }])\r\n    }\r\n    console.log(\"created\")\r\n\r\n  }\r\n\r\n  const _onEdited = (e) => {\r\n    // console.log(e)\r\n    const { layers: { _layers } } = e;\r\n    Object.values(_layers).map(({ _leaflet_id, editing }) => {\r\n      setMapLayers((layers) =>\r\n        layers.map((a) => a.id === _leaflet_id\r\n          ? { ...a, latlngs: { ...editing.latlngs[0] } }\r\n          : a)\r\n      );\r\n    });\r\n    console.log(\"edited\")\r\n  };\r\n\r\n  const _onDeleted = (e) => {\r\n    // console.log(e)\r\n    const { layers: { _layers } } = e;\r\n    Object.values(_layers).map((_leaflet_id) => {\r\n      setMapLayers(layers => layers.filter(l => l.id !== _leaflet_id))\r\n    });\r\n    console.log(\"deleted\")\r\n\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <MapContainer center={[51.0, 19.0]} zoom={4} maxZoom={18}>\r\n        <FeatureGroup>\r\n          <CustomEditControl\r\n            position=\"topleft\"\r\n            onCreated={_onCreated}\r\n            onEdited={_onEdited}\r\n            onDeleted={_onDeleted}\r\n            draw={{\r\n              rectangle: false,\r\n              polyline: false,\r\n              circle: false,\r\n              circlemarker: false,\r\n              marker: true\r\n            }}\r\n          />\r\n        </FeatureGroup>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n\r\n        <MarkerClusterGroup>\r\n          {filteredChargerData.map((charger) => (\r\n            <Marker key={charger.id} position={[charger.gps.latitude, charger.gps.longitude]} >\r\n              <Popup>\r\n                {charger.name}\r\n              </Popup>\r\n            </Marker>\r\n          ))}\r\n        </MarkerClusterGroup>\r\n      </MapContainer>\r\n      {console.log(JSON.stringify(mapLayers, 0, 2))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}