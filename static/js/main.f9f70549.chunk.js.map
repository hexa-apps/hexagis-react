{"version":3,"sources":["components/CustomEditControl.js","App.js","reportWebVitals.js","index.js"],"names":["eventHandlers","onEdited","onDrawStart","onDrawStop","onDrawVertex","onEditStart","onEditMove","onEditResize","onEditVertex","onEditStop","onDeleted","onDeleteStart","onDeleteStop","CustomEditControl","props","context","useLeafletContext","controlRef","useRef","propsRef","onDrawCreate","e","layerContainer","addLayer","layer","onCreated","useEffect","key","map","on","evt","handlers","Object","keys","filter","handler","type","length","leaflet","Draw","Event","CREATED","options","edit","featureGroup","draw","position","current","Control","addTo","onMounted","off","isEqual","remove","propTypes","reduce","acc","val","PropTypes","func","shape","polyline","oneOfType","object","bool","polygon","rectangle","circle","marker","poly","allowIntersection","oneOf","App","filteredChargerData","chargerData","charger","address","country","useState","mapLayers","setMapLayers","MapContainer","center","zoom","maxZoom","FeatureGroup","layerType","_leaflet_id","layers","id","latlngs","getLatLngs","console","log","_layers","values","editing","a","l","circlemarker","TileLayer","url","attribution","Marker","gps","latitude","longitude","Popup","name","JSON","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f9f70549.chunk.js","sourcesContent":["// Refactored v3 CustomEditControl.js file\nimport { useEffect, useRef } from 'react';\nimport { PropTypes } from 'prop-types';\nimport Draw from 'leaflet-draw'; // eslint-disable-line\nimport isEqual from 'lodash/isEqual';\n\nimport { useLeafletContext } from '@react-leaflet/core';\nimport leaflet, { Map, Control } from 'leaflet';\n\nconst eventHandlers = {\n  onEdited: 'draw:edited',\n  onDrawStart: 'draw:drawstart',\n  onDrawStop: 'draw:drawstop',\n  onDrawVertex: 'draw:drawvertex',\n  onEditStart: 'draw:editstart',\n  onEditMove: 'draw:editmove',\n  onEditResize: 'draw:editresize',\n  onEditVertex: 'draw:editvertex',\n  onEditStop: 'draw:editstop',\n  onDeleted: 'draw:deleted',\n  onDeleteStart: 'draw:deletestart',\n  onDeleteStop: 'draw:deletestop',\n};\n\nfunction CustomEditControl(props) {\n    const context = useLeafletContext()\n    const controlRef = useRef()\n    const propsRef = useRef(props)\n\n    const onDrawCreate = (e) => {    \n        context.layerContainer.addLayer(e.layer);\n        props.onCreated && props.onCreated(e);\n    };\n\n    useEffect(() => {          \n        for (const key in eventHandlers) {\n            context.map.on(eventHandlers[key], (evt) => {\n                let handlers = Object.keys(eventHandlers).filter(handler => eventHandlers[handler] === evt.type);\n                if (handlers.length === 1) {\n                    let handler = handlers[0];\n                    props[handler] && props[handler](evt);\n                }\n            })\n        }\n\n        context.map.on(leaflet.Draw.Event.CREATED, onDrawCreate);\n        const options = {\n            edit: {\n                ...props.edit,\n                featureGroup: context.layerContainer\n            }\n        }\n        if (props.draw) {\n            options.draw = { ...props.draw };\n        }\n        if (props.position) {\n            options.position = props.position;\n        }\n\n        controlRef.current = new Control.Draw(options);\n        controlRef.current.addTo(context.map);\n        props.onMounted && props.onMounted(controlRef.current);\n\n        return () => {\n            context.map.off(leaflet.Draw.Event.CREATED, onDrawCreate);\n        \n            for (const key in eventHandlers) {\n              if (props[key]) {\n                context.map.off(eventHandlers[key], props[key]);\n              }\n            }\n        }\n    }, [])\n\n    useEffect(() => {\n        // If the props haven't changed, don't update\n        if (\n            isEqual(props.draw, propsRef.current.draw)\n            && isEqual(props.edit, propsRef.current.edit)\n            && props.position === propsRef.current.position\n        ) {\n            return false;\n        }\n\n        const options = {\n            edit: {\n                ...props.edit,\n                featureGroup: context.layerContainer\n            }\n        }\n        if (props.draw) {\n            options.draw = { ...props.draw };\n        }\n        if (props.position) {\n            options.position = props.position;\n        }\n\n        controlRef.current.remove(context.map);\n        controlRef.current = new Control.Draw(options);\n        controlRef.current.addTo(context.map);\n\n        // Remount the new draw control\n        props.onMounted && props.onMounted(controlRef.current);\n        propsRef.current = props\n    }, [props.draw, props.edit, props.position])\n\n    return null;\n}\n\nCustomEditControl.propTypes = {\n    ...Object.keys(eventHandlers).reduce((acc, val) => {\n        acc[val] = PropTypes.func;\n        return acc;\n    }, {}),\n    onCreated: PropTypes.func,\n    onMounted: PropTypes.func,\n    draw: PropTypes.shape({\n        polyline: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n        polygon: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n        rectangle: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n        circle: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n        marker: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n    }),\n    edit: PropTypes.shape({\n        edit: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n        remove: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n        poly: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n        allowIntersection: PropTypes.bool,\n    }),\n    position: PropTypes.oneOf([\n        'topright',\n        'topleft',\n        'bottomright',\n        'bottomleft'\n    ]),\n};\n\nexport default CustomEditControl;","import { useState } from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup, FeatureGroup } from \"react-leaflet\";\n// import { EditControl } from \"react-leaflet-draw\";\nimport CustomEditControl from \"./components/CustomEditControl\"\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport chargerData from \"./data/charger.json\";\nimport \"./App.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\n\nfunction App() {\n  const filteredChargerData = chargerData.filter(charger => charger.address.country === \"United Kingdom\")\n  const [mapLayers, setMapLayers] = useState([])\n\n  const _onCreated = (e) => {\n    // console.log(e)\n    const { layerType, layer } = e;\n    if (layerType === \"polygon\") {\n      const { _leaflet_id } = layer;\n      setMapLayers((layers) => [...layers, { id: _leaflet_id, latlngs: layer.getLatLngs()[0] }])\n    }\n    console.log(\"created\")\n\n  }\n\n  const _onEdited = (e) => {\n    // console.log(e)\n    const { layers: { _layers } } = e;\n    Object.values(_layers).map(({ _leaflet_id, editing }) => {\n      setMapLayers((layers) =>\n        layers.map((a) => a.id === _leaflet_id\n          ? { ...a, latlngs: { ...editing.latlngs[0] } }\n          : a)\n      );\n    });\n    console.log(\"edited\")\n  };\n\n  const _onDeleted = (e) => {\n    // console.log(e)\n    const { layers: { _layers } } = e;\n    Object.values(_layers).map((_leaflet_id) => {\n      setMapLayers(layers => layers.filter(l => l.id !== _leaflet_id))\n    });\n    console.log(\"deleted\")\n\n  }\n\n  return (\n    <div>\n      <MapContainer center={[51.0, 19.0]} zoom={4} maxZoom={18}>\n        <FeatureGroup>\n          <CustomEditControl\n            position=\"topleft\"\n            onCreated={_onCreated}\n            onEdited={_onEdited}\n            onDeleted={_onDeleted}\n            draw={{\n              rectangle: false,\n              polyline: false,\n              circle: false,\n              circlemarker: false,\n              marker: true\n            }}\n          />\n        </FeatureGroup>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n\n        <MarkerClusterGroup>\n          {filteredChargerData.map((charger) => (\n            <Marker key={charger.id} position={[charger.gps.latitude, charger.gps.longitude]} >\n              <Popup>\n                {charger.name}\n              </Popup>\n            </Marker>\n          ))}\n        </MarkerClusterGroup>\n      </MapContainer>\n      {console.log(JSON.stringify(mapLayers, 0, 2))}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}